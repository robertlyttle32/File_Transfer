#!/bin/bash
import serial
import io
import time
import os
import logging
from pathlib import Path
from datetime import datetime
from ublox_gps import UbloxGps
import make_csv_file as form_gps
from datetime import datetime
from pa1010d import PA1010D
import schedule

latitude = 0
longitude = 0
altitude = 0
num_sats = 0
gps_qual = 0
speed_over_ground = 0
pdop = 0
vdop = 0
hdop = 0
timestamp = 0
#FUNCTION = 'GPS_log'
LATITUDE = 0
LONGITUDE = 0
NAME = 0
ALTITUDE = 0
SPEED = 0
DATE = 0
TIME = 0
count = 0
RESET = False
RESET_BUTTON = False
#port = serial.Serial('/dev/serial0', baudrate=38400, timeout=1)
#gps = UbloxGps(port)
gps = PA1010D()

def daily_folder():
    get_image_time = datetime.now()
    camera_sub_dir = get_image_time.strftime("%Y_%m_%d")
    return camera_sub_dir


def make_new_dir():
    FUNCTION = 'GPS'
    HOME = Path.home()
    STORAGE_DIRECTORY = f'{HOME}/{FUNCTION}_{daily_folder()}'

    if os.path.exists(STORAGE_DIRECTORY):
        pass
    else:
        os.mkdir(STORAGE_DIRECTORY)
        #time.sleep(.5)
        #CSV_FILE = f'{STORAGE_DIRECTORY}/GPS_1.csv'
        #count = 0
        #form_gps.format_gps(CSV_FILE,count,LATITUDE,LONGITUDE,NAME,ALTITUDE,SPEED,DATE,TIME)
    #print (path)
    return STORAGE_DIRECTORY



def get_csv_num():
    try:
        count = 0
        STORAGE_DIRECTORY = make_new_dir()
        CSV_FILE = f'{STORAGE_DIRECTORY}/GPS_1.csv'
        if os.path.exists(CSV_FILE):
            print('CSV file: ',CSV_FILE)
            with open(CSV_FILE,'r') as read_file:
                line_count = len(read_file.readlines())
                print(line_count)
                count = line_count
        else:
            count = 0
            make_new_dir()

        return count

    except Exception as e:
        print('something went wrong try again ....', e)

    finally:
        pass


#Define the remote path file path
#remoteFilePath = '/tmp/home/data/'
#Define the localFilePath path file path
#localFilePath = make_new_dir(STORAGE_DIRECTORY) # '/home/rdl-nano2/rdl_mobile_tech/'

def get_logger(object, STORAGE_DIRECTORY):
    #logger
    LOG_FORMAT = '%(levelname)s %(asctime)s - %(message)s'
    logging.basicConfig(filename ='/'+STORAGE_DIRECTORY+'/gps.log',level=logging.DEBUG,format=LOG_FORMAT) #Append mode
    #logging.basicConfig(filename ='/XAVIER_RELEASE/test.log',level=logging.DEBUG,format=LOG_FORMAT,filemode='w') #Overwrite mode
    logger = logging.getLogger()
    log_info = logger.info(object)
    #logger.debug('test debug log')
    #logger.warning('test warning log')
    #logger.error('test error log')
    #logger.critical('test critical log')
    return log_info

#port = serial.Serial('/dev/ttyACM0', baudrate=9600, timeout=1)
#gps = UbloxGps(port)


#!/usr/bin/env python3
#import time
#from pa1010d import PA1010D
#gps = PA1010D()

count = get_csv_num()
def run(count):
    #try:
     #   count = 0
      #  STORAGE_DIRECTORY, count = make_new_dir(count)
       # CSV_FILE = f'{STORAGE_DIRECTORY}/GPS_1.csv'
        #if os.path.exists(CSV_FILE):
         #   print('CSV file: ',CSV_FILE)
          #  with open(CSV_FILE,'r') as read_file:
           #     line_count = len(read_file.readlines())
            #    print(line_count)
             #   count = line_count
        #else:
         #   count = 0
          #  make_new_dir(count)

    #print("Listening for GPS Messages")
        #while True:
    HOME = Path.home()
    FUNCTION = 'GPS'
    STORAGE_DIRECTORY = f'{HOME}/{FUNCTION}_{daily_folder()}'
    CSV_FILE = f'{STORAGE_DIRECTORY}/GPS_1.csv'
    try:
        #STORAGE_DIRECTORY = make_new_dir()
        result = gps.update()
        if result:
            TIMESTAMP = gps.timestamp
            LATITUDE = gps.latitude
            LONGITUDE = gps.longitude
            ALTITUDE = gps.altitude
            NUM_SATS = gps.num_sats
            GPS_QUAL = gps.gps_qual
            SPEED = gps.speed_over_ground
            FIX_TYPE = gps.mode_fix_type
            PDOP = gps.pdop
            VDOP = gps.vdop
            HDOP = gps.hdop

            coordinates = f'lat_{latitude}, lon_{longitude}, speed_{speed_over_ground}'
            get_logger(coordinates, STORAGE_DIRECTORY)
            #NO,LATITUDE,LONGITUDE,NAME,ALTITUDE,SPEED,DATE,TIME
            #NAME = count.zfill(3)
            NAME = count
            NAME = f'TP{NAME}'
            DATE = datetime.now().strftime('%Y/%m/%d')
            TIME = datetime.now().strftime('%H:%M:%S')
            form_gps.format_gps(CSV_FILE,count,LATITUDE,LONGITUDE,NAME,ALTITUDE,SPEED,DATE,TIME)
            #if count != None:
            #count = count + 1
            print('Longitude: ', LONGITUDE)
            print('Latitude: ', LATITUDE)
            #if RESET == True:
             #   break
    except (ValueError, IOError) as err:
        print(err)
    finally:
        pass


if __name__ == '__main__':
    RESET_BUTTON = False
    RESET = False
    count = get_csv_num()
    def cycle_logger(): # run schedule to cycle files at midnight
        time.sleep(1)
        os.system(f'rm -r {make_new_dir()}')
        time.sleep(1)
        run(count)

    def reset_logger(): # run to reset log files to zero
            time.sleep(1)
            os.system(f'rm -r {make_new_dir()}')
            time.sleep(2)
            make_new_dir()
            run(count)

    def get_csv_num1():
        try:
            count = 0
            STORAGE_DIRECTORY = make_new_dir()
            CSV_FILE = f'{STORAGE_DIRECTORY}/GPS_1.csv'
            if os.path.exists(CSV_FILE):
                print('CSV file: ',CSV_FILE)
                with open(CSV_FILE,'r') as read_file:
                    line_count = len(read_file.readlines())
                    print(line_count)
                    count = line_count
            else:
                make_new_dir(count)

        except Exception as e:
            print('something went wrong try again ....', e)



schedule.every().day.at('00:00').do(cycle_logger)
#schedule.every().day.at('00:00').do(do_something)
while True:
    RESET_BUTTON = False
    schedule.run_pending()
    START = False
    if START == True:
        run(count)
    # Reset logger
    #RESET_BUTTON add push butto
    elif RESET_BUTTON == True:
        reset_logger()
        count = 0
        #time.sleep(1)
        #run(count)
    # Cycle logger

    elif RESET == True:
        cycle_logger()
        count = 0

    else:
        run(count)
    time.sleep(1)
    count = count + 1


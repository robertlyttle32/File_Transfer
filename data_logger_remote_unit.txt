import serial
import io
import time
import os
import logging
from pathlib import Path
from datetime import datetime
from ublox_gps import UbloxGps
import make_csv_file as form_gps
from datetime import datetime

#port = serial.Serial('/dev/serial0', baudrate=38400, timeout=1)
#gps = UbloxGps(port)


def gps_logger_folder():
    get_image_time = datetime.now()
    camera_sub_dir = get_image_time.strftime("%Y_%m_%d")
    return camera_sub_dir


HOME = '/home/pi' #Path.home()
FUNCTION = 'GPS_log'
path = f'{HOME}/{FUNCTION}_{gps_logger_folder()}'
STORAGE_DIRECTORY = path # Storage for database, images
if os.path.exists(STORAGE_DIRECTORY):
    pass
else:
    os.mkdir(STORAGE_DIRECTORY)
print (path)

#Define the remote path file path
#remoteFilePath = '/tmp/home/data/'
#Define the localFilePath path file path
localFilePath = STORAGE_DIRECTORY # '/home/rdl-nano2/rdl_mobile_tech/'

#logger
LOG_FORMAT = '%(levelname)s %(asctime)s - %(message)s'
logging.basicConfig(filename =localFilePath+'/gps.log',level=logging.DEBUG,format=LOG_FORMAT) #Append mode
#logging.basicConfig(filename ='/XAVIER_RELEASE/test.log',level=logging.DEBUG,format=LOG_FORMAT,filemode='w') #Overwrite mode
logger = logging.getLogger()
#logger.info('This is a test log')
#logger.debug('test debug log')
#logger.warning('test warning log')
#logger.error('test error log')
#logger.critical('test critical log')


port = serial.Serial('/dev/ttyACM0', baudrate=9600, timeout=1)
gps = UbloxGps(port)

def run():

    try:
        print("Listening for UBX Messages")
        count = 0
        while True:
            try:
                geo = gps.geo_coords()
                print("Longitude: ", geo.lon) 
                print("Latitude: ", geo.lat)
                print("Heading of Motion: ", geo.headMot)
                coordinates = f'lat_{geo.lat}, lon_{geo.lon}, headMot_{geo.headMot}'
                logger.info(coordinates)
                #NO,LATITUDE,LONGITUDE,NAME,ALTITUDE,SPEED,DATE,TIME
                #NAME = count.zfill(3)
                NAME = count
                NAME = f'TP{NAME}'
                ALTITUDE = 0
                CSV_FILE = f'{STORAGE_DIRECTORY}/GPS_1.csv'
                DATE = datetime.now().strftime('%Y/%m/%d')
                TIME = datetime.now().strftime('%H:%M:%S')
                form_gps.format_gps(CSV_FILE,count,geo.lat,geo.lon,NAME,ALTITUDE,geo.headMot,DATE,TIME)
                count = count + 1
            except (ValueError, IOError) as err:
                print(err)

    finally:
        port.close()


if __name__ == '__main__':
    run()

